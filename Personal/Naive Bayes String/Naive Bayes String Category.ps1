#DataFetch<#$URLNitesh = "https://ecolabqa.service-now.com/api/now/table/incident?sysparm_query=assigned_to=82d6b9e64f0c324032858d9f9310c799&sysparm_fields=short_description"$RestOutput = Invoke-RestMethod -Uri $URLNitesh -Method Get -Credential $cred$SDNitesh= $RestOutput.result$UrlAnand = "https://ecolabqa.service-now.com/api/now/table/incident?sysparm_query=assigned_to=257276c5db236340792444261b9619e2&sysparm_fields=short_description"$RestOutputa = Invoke-RestMethod -Uri $UrlAnand -Method Get -Credential $cred$SDAnand = $RestOutputa.result$URLNayan = "https://ecolabqa.service-now.com/api/now/table/incident?sysparm_query=assigned_to=a0714ffa4f04b6c46b82dd2f0310c79d&sysparm_fields=short_description"$RestOutputa = Invoke-RestMethod -Uri $urlnayan -Method Get -Credential $cred$SDNayan = $RestOutputa.result#>function Create-NaiveLearningUnit{	param(	[object]$DataArray	)	$TempHash = @{}	$WordCount=0	foreach($Data in $DataArray){		foreach($Word in ($Data -split '\s+'))		{			$WordCount++			try{				$TempHash.$word++			}			catch{				$TempHash.Add($word,1)			}		}	}	return New-Object psobject -property @{Hash=$TempHash;TotalWords=$WordCount}}function Create-NaiveLearningObject{	param(	[String]$Category,	[object]$DataArray	)	class NaiveLearning{		[String]$Category		[object]$DataArray	}	return New-Object NaiveLearning -property @{Category=$Category;DataArray=$DataArray}}function Create-NaiveLearning{	param(	[object[]]$NaiveLearningClassObjects	)	$obj=@()	foreach($Object in $NaiveLearningClassObjects){		$data = Create-NaiveLearningUnit -DataArray $Object.DataArray		$TempObj=  New-Object psobject		$TempObj|Add-Member -MemberType NoteProperty -Name Category -Value $object.Category		$TempObj|Add-Member -MemberType NoteProperty -Name HashData -Value $Data		$obj+=$TempObj	}	return $obj} function Perform-NavieClassification{	param(	[String]$String,	[object]$LearnedNaive	)	$StringArray = $string -split '\s+' -split ':'	$Arr = @()	$MajorTotal=($LearnedNaive.hashdata.totalwords|Measure-Object -Sum).Sum	foreach($Entry in $LearnedNaive){		$Prob = 1		$TempObj = New-Object psobject 		$TempObj|Add-Member -MemberType NoteProperty -Name Category -Value $Entry.category		foreach($Word in $StringArray){			$Total = $Entry.HashData.TotalWords			$Count = (($Entry.HashData.Hash.$Word,($Total/$MajorTotal)|Measure-Object -Maximum).Maximum)			$Prob*=($Count / $Total)			try{				$TempObj.$word+=($Count/$Total)			}			catch{				$TempObj|Add-Member -MemberType NoteProperty -Name $Word -Value ($Count/$Total)			}		}		$TempObj|Add-Member -MemberType NoteProperty -Name TotalProb -Value $Prob		$Arr+=$TempObj	}	$Arr=$Arr|Sort-Object -Descending -Property TotalProb	$Arr[0].Category,$Arr}$AnandLearning =Create-NaiveLearningObject -Category 'Anand' -DataArray $SDAnand.short_description$NiteshLearning = Create-NaiveLearningObject -Category 'Nitesh' -DataArray $SDNitesh.short_description$NayanLearning = Create-NaiveLearningObject -Category 'Nayan' -DataArray $SDNayan.short_description$NaiveLearn = Create-NaiveLearning -NaiveLearningClassObjects @($AnandLearning,$NiteshLearning,$NayanLearning) Perform-NavieClassification -String 'CRM User Creation' -LearnedNaive  $NaiveLearn